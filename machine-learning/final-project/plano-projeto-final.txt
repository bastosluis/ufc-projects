plano A: 
    classificador de cartas de yu gi oh dada a descrição:
        - com a descrição da carta, tentamos determinar se a carta é um monster, uma spell ou uma trap
        - analisando outros projetos similares como detecção de spam, vimos que é possível transformar o texto em parâmetros para
        o modelo, e podemos considerar o tipo da carta como as classes (são 3)
        - já que o yu gi oh possui cartas com texto bem estruturado, podemos utilizar algumas bibliotecas de contagem e vetorização do texto, como TfidfVectorizer
        - usando como base esse artigo: https://towardsdatascience.com/email-spam-detection-1-2-b0e06a5c0472 , é possível criar predições apenas com a biblioteca
         TfidfVectorizer e um classificador, por exemplo o naive bayes
        
        - caso for interessante, podemos aumentar a complexidade do projeto da seguinte forma:
        - com essa informação, podemos também utilizá-la para funelar e tentar advinhar outras características da carta 
        (se for um monstro, advinhar sua raça, se for uma spell, advinhar seu tipo (spell rápida, spell comum, spell contínua) e se for uma trap advinhar se ela é normal, contínua ou counter)
        - com esses dados, podemos tentar novamente advinhar utilizando o texto da descrição qual(quais) carta(s) específica(s) possui(possuem) a descrição.
        
        - podemos utilizar o banco de dados que encontramos em formato json para treinar o modelo;
plano B:
    classificador de patente no CSGO dado os parâmetros de uma partida
        - os parâmetros são dano, KDA, posicionamento no mapa, etc
        - encontramos um banco de dados que armazena essas informações, logo não será necessário criá-lo: https://www.kaggle.com/datasets/skihikingkevin/csgo-matchmaking-damage
        
        - caso for interessante, podemos aumentar a complexidade do projeto da seguinte forma:
        - com essa informação, podemos criar um score para cada jogador, com o intuito de dar match em 10 jogadores com habilidades equivalentes (o jogo é 5x5)
